#!/usr/bin/python

import threading
import traceback

import serial

import roslib
roslib.load_manifest('actuator_driver')
import rospy
from std_msgs.msg import Header
from kill_handling.listener import KillListener

from actuator_driver.msg import Switches
from actuator_driver.srv import PulseValve, PulseValveResponse, SetValve, SetValveResponse


rospy.init_node('actuator_driver')


class ActuatorDevice(object):
    VALVES = 6
    SWITCHES = 2
    
    def __init__(self, port):
        self._port = port
        self._open()
    def _open(self):
        if hasattr(self, '_serial'):
            self._serial.close()
            del self._serial
        while True:
            try:
                self._serial = serial.Serial(self._port, 115200)
            except Exception:
                traceback.print_exc()
            else:
                break
    
    def _read_byte(self):
        while True:
            try:
                return ord(self._serial.read(1))
            except Exception:
                traceback.print_exc()
                self._open()
    def _read(self):
        b1 = self._read_byte()
        while True:
            b2 = self._read_byte()
            if b2 == b1 ^ 0xff:
                return b1
            print 'invalid checksum', b1, b2
            b1 = b2
    def read(self):
        cmd = self._read()
        if 0x00 <= cmd < 0x04:
            return 'switch_values', [bool(cmd&2**i) for i in xrange(self.SWITCHES)]
        elif cmd == 0x40:
            return 'ping',
        elif 0x80 <= cmd < 0xc0:
            return 'set_valves', [bool(cmd&2**i) for i in xrange(self.VALVES)]
        else:
            print 'unknown cmd', cmd
            return 'unknown', cmd
    
    def _send_packet(self, val):
        try:
            self._serial.write(chr(val) + chr(val ^ 0xff))
        except Exception:
            traceback.print_exc()
    def send_ping(self):
        self._send_packet(0x40)
    def send_set_valves(self, valves):
        assert len(valves) == self.VALVES
        self._send_packet(0x80 + sum(2**i for i, valve in enumerate(valves) if valve))
    def send_read_switches(self):
        self._send_packet(0x00)


ad = ActuatorDevice(rospy.get_param('~port'))

default_valves = [True] + [False]*(ActuatorDevice.VALVES-1)
valves = list(default_valves)
ad.send_set_valves(valves)
valves_lock = threading.Lock()

def on_kill():
    with valves_lock:
        valves[:] = default_valves
        ad.send_set_valves(valves)
kill_listener = KillListener(on_kill)

def pulse_valve(req):
    if req.valve >= ActuatorDevice.VALVES or kill_listener.get_killed():
        return None # service error condition
    
    with valves_lock:
        valves[:] = [True if i == req.valve else valve for i, valve in enumerate(valves)]
        ad.send_set_valves(valves)
    rospy.sleep(req.duration)
    with valves_lock:
        valves[:] = [False if i == req.valve else valve for i, valve in enumerate(valves)]
        ad.send_set_valves(valves)
    return PulseValveResponse()
rospy.Service('~pulse_valve', PulseValve, pulse_valve)

def set_valve(req):
    if req.valve >= ActuatorDevice.VALVES or kill_listener.get_killed():
        return None # service error condition
    
    with valves_lock:
        valves[:] = [req.opened if i == req.valve else valve for i, valve in enumerate(valves)]
        ad.send_set_valves(valves)
    return SetValveResponse()
rospy.Service('~set_valve', SetValve, set_valve)

def _poll():
    with valves_lock:
        ad.send_read_switches()
        ad.send_set_valves(valves)
rospy.Timer(rospy.Duration(0.01), lambda timerevent: _poll())

pub = rospy.Publisher('~switches', Switches)
while not rospy.is_shutdown():
    packet = ad.read()
    if packet[0] == 'switch_values':
        pub.publish(Switches(
            header=Header(
                stamp=rospy.Time.now(),
            ),
            pressed=packet[1],
        ))

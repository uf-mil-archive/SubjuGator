#!/usr/bin/env python

import os
import sys
import time

import roslib; roslib.load_manifest('sub_launch')
import rospy
import actionlib

from uf_common import orientation_helpers
from uf_common.msg import MoveToAction

if len(sys.argv) < 2:
    print 'Examples:'
    print 'send_waypoint depth 2'
    print 'send_waypoint forward 5 --speed .2'
    print 'send_waypoint set_orientation NORTH'
    print 'send_waypoint yaw_left_deg 30'
    sys.exit()

posargs = []
kwargs = {}
orig = list(sys.argv[1:])
current_kwarg = None
while orig:
    this = orig.pop(0)
    if this.startswith('--'):
        current_kwarg = this[2:]
        kwargs[this[2:]] = [eval(orig.pop(0))]
    elif current_kwarg is None:
        posargs.append(this)
    else:
        kwargs[current_kwarg] += [eval(this)]

rospy.init_node('send_waypoint', disable_signals=True)

print 'Waiting for server...'
client = actionlib.SimpleActionClient('moveto', MoveToAction)
client.wait_for_server()
go = client.send_goal_and_wait

print 'Waiting for current position...'
p = orientation_helpers.PoseEditor.from_PoseTwistStamped_topic('/trajectory')

args = [eval(x, orientation_helpers.__dict__) for x in posargs[1:]] # lets you do "set_orientation NORTH"
if len(args) >= 2:
    args = [args]
p = getattr(p, posargs[0])(*args).as_MoveToGoal(**dict((k, v if len(v) > 1 else v[0]) for k, v in kwargs.iteritems()))

print 'Sending goal...'
def done(goal_status, result):
    print 'Reached goal.'
    os._exit(0)
client.send_goal(p, done_cb=done)

print 'Press Ctrl-C to cancel...'
try:
    while not rospy.is_shutdown():
        time.sleep(.1)
except KeyboardInterrupt:
    print 'Cancelling...'
    client.cancel_goal()
    print 'Cancelled, exiting.'
    rospy.signal_shutdown('cancelled goal')
    sys.exit(1)

#!/usr/bin/env python

from __future__ import division

import math
import random
import traceback

import ode
import pygame
from OpenGL.GL import *
from OpenGL.GLU import *
from twisted.internet import protocol, reactor, task

import roslib
roslib.load_manifest('subsim')
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Vector3, Quaternion

from sim import threed, vector, util
from sim.vector import v, V

from subsim import devices

rospy.init_node('subsim')

imu_listeners = set()
thrusters = [0]*8

def send_imu_update(**update):
    for imu_listener in imu_listeners:
        imu_listener.sendUpdate(**update)

ping_listeners = set()

def send_ping(*arg, **kwarg):
    for ping_listener in ping_listeners:
        ping_listener.sendPing(*arg, **kwarg)

clip = lambda x, (low, high): min(max(x, low), high)

def real_buoyancy_force(depth, r):
    inf = 1e1000
    assert math.isinf(inf)
    sphere_antiderivative = lambda h: -h**3*math.pi/3 + h*math.pi*r**2
    sphere_true_antiderivative = lambda h: sphere_antiderivative(clip(h, (-r, r)))
    vol_submerged = sphere_true_antiderivative(depth) - sphere_true_antiderivative(-inf)
    return -1000 * G * vol_submerged
def buoyancy_force(depth, r, max_force):
    return real_buoyancy_force(depth, r)/(1000 * 9.8 * 4/3*math.pi*r**3) * max_force
    

world, world_time = ode.World(), reactor.seconds()
G = v(0, 0, -9.81)
world.setGravity(G)

body = ode.Body(world)
M = ode.Mass()
M.setBoxTotal(47, 1.27, .46, .46)
body.setMass(M)
body.setPosition((9, 9, -2))
body.setQuaternion(vector.axisangle_to_quat(v(0, 0, 1), math.pi/2+math.pi-math.pi/4))

space = ode.HashSpace()

body_geoms = []
body_geoms.append(ode.GeomSphere(None, .5))
body_geoms[-1].setPosition((.2, 0, 0))
body_geoms.append(ode.GeomTransform(space))
body_geoms[-1].setGeom(body_geoms[-2])
body_geoms[-1].setBody(body)
body_geoms.append(ode.GeomSphere(None, .5))
body_geoms[-1].setPosition((-.2, 0, 0))
body_geoms.append(ode.GeomTransform(space))
body_geoms[-1].setGeom(body_geoms[-2])
body_geoms[-1].setBody(body)

FT = 12*.0254
FLOOR = -16 * FT

pool_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', 'transdec.obj'))
pool_geom = ode.GeomTriMesh(pool_mesh.ode_trimeshdata, space)

def get_water_vel(pos):
    return v(0, 0, 0)
    #return (pos % v(0, 0, 1))*math.e**(-pos.mag()/3)

imu_pos = v(0.43115992, 0.0, 0.010165058)

killed = False
locked = False


odom_pub = rospy.Publisher('/sim_odom', Odometry)

def world_tick():
    global world_time
    
    dt = 1/30
    
    water_vel = get_water_vel(V(body.getPosition()))
    
    body.addForceAtRelPos(buoyancy_force(-body.getPosition()[2], 0.2, 47*9.81+2), (0, 0, .01))
    body.addForce(-(40 if body.getPosition()[2] <= 0 else 10) * (V(body.getLinearVel())-water_vel))
    #body.addForce([random.gauss(0, 1) for i in xrange(3)])
    #body.addTorque([random.gauss(0, 10) for i in xrange(3)])
    body.addTorque(-(10 if body.getPosition()[2] <= 0 else 5) * V(body.getAngularVel()))
    
    w.step(dt)
    
    #print thrusters
    
    sub_model.vectors = []
    thruster_mag = v(0, 0, 0)
    for i, (reldir, relpos, fwdforce, revforce) in enumerate([
        (v(0, 0,-1), v( 11.7103, -5.3754,  1.9677)*.0254, 21.57, 17.98), # FRV
        (v(0, 0,-1), v( 11.7125,  5.3754,  1.9677)*.0254, 21.57, 17.98), # FLV
        (v(0, 1, 0), v( 22.3004, -1.8020, -1.9190)*.0254, 21.57, 17.98), # FS
        (v(0, 0,-1), v(-11.7125,  5.3754,  1.9677)*.0254, 21.57, 17.98), # RLV
        (v(1, 0, 0), v(-24.9072,  4.5375,  2.4285)*.0254, 31.33, 16.43), # LFOR
        (v(1, 0, 0), v(-24.9072, -4.5375,  2.4285)*.0254, 31.33, 16.43), # RFOR
        (v(0,-1, 0), v(-20.8004,  1.8020, -2.0440)*.0254, 21.57, 17.98), # RS
        (v(0, 0,-1), v(-11.7147, -5.3754,  1.9677)*.0254, 21.57, 17.98), # RRV
    ]):
        if body.getRelPointPos(relpos)[2] > 0: # skip thrusters that are out of the water
            continue
        body.addRelForceAtRelPos(reldir*thrusters[i]*(fwdforce if thrusters[i] > 0 else revforce), relpos)
        sub_model.vectors.append((relpos, relpos - .02*reldir*thrusters[i]*(fwdforce if thrusters[i] > 0 else revforce)))
        
        # calculate generated field assuming thrusters are magnetic dipoles
        I = thrusters[i]
        m = I * reldir.unit()*math.pi*.04**2 # assume thrusters have a 4cm radius
        r = imu_pos - relpos
        mu0 = 4*math.pi*1e-7
        thruster_mag += mu0/4/math.pi*(
            3*r*(m*r)/r.mag()**5 -
            m/r.mag()**3
        )
    
    keys = pygame.key.get_pressed()
    for keycode, force in [
        (pygame.K_k, v(-50, 0, 0)),
        (pygame.K_i, v(+50, 0, 0)),
        (pygame.K_j, v(0, +50, 0)),
        (pygame.K_l, v(0, -50, 0)),
        (pygame.K_o, v(0, 0, +50)),
        (pygame.K_m, v(0, 0, -50)),
    ]:
        if keys[keycode]:
            body.addRelForce(force*(10 if keys[pygame.K_RSHIFT] else 1)*(.1 if keys[pygame.K_RCTRL] else 1))
    for keycode, torque in [
        (pygame.K_COMMA, v(-20, 0, 0)),
        (pygame.K_u, v(+20, 0, 0)),
        (pygame.K_h, v(0, +20, 0)),
        (pygame.K_SEMICOLON, v(0, -20, 0)),
        (pygame.K_0, v(0, 0, +20)),
        (pygame.K_n, v(0, 0, -20)),
    ]:
        if keys[keycode]:
            body.addRelTorque(torque*(10 if keys[pygame.K_RSHIFT] else 1)*(.1 if keys[pygame.K_RCTRL] else 1))
    
    global killed
    if keys[pygame.K_1]:
        killed = True
    if keys[pygame.K_2]:
        killed = False
    global locked
    if keys[pygame.K_3]:
        locked = True
    if keys[pygame.K_4]:
        locked = False
    
    last_vel = V(body.getRelPointVel(imu_pos))
    last_angvel = V(body.vectorFromWorld(body.getAngularVel()))
    
    contactgroup = ode.JointGroup()
    
    if locked:
        j = ode.FixedJoint(world, contactgroup)
        j.attach(body, None)
        j.setFixed()
    
    near_pairs = []
    space.collide(None, lambda _, geom1, geom2: near_pairs.append((geom1, geom2)))
    for geom1, geom2 in near_pairs:
        for contact in ode.collide(geom1, geom2):
            contact.setBounce(0.2)
            contact.setMu(5000)
            j = ode.ContactJoint(world, contactgroup, contact)
            j.attach(geom1.getBody(), geom2.getBody())
    
    world.step(dt)
    world_time += dt
    
    contactgroup.empty()
    
    a = (V(body.vectorFromWorld(body.getRelPointVel(imu_pos) - last_vel)))/dt - V(body.vectorFromWorld(world.getGravity()))
    
    imu_to_sub = v(0,1,0,0)%v(0.012621022547474, 0.002181321593961, -0.004522523520991, 0.999907744947984)
    #imu_to_sub = vector.axisangle_to_quat(v(1,0,0),math.pi)
    imu_gyro = imu_to_sub.conj().quat_rot((last_angvel + body.vectorFromWorld(body.getAngularVel()))/2)
    imu_acc = imu_to_sub.conj().quat_rot(-a)
    #print imu_acc
    
    north = v(-0.022442e-4, 0.241510e-4, -0.405728e-4)
    magScale = [
        v(1.0138045310392845, 0.00019922504624389086, -0.020790660137153874),
        v(0.00019922504624392035, 0.9912854707843127, -0.006138853722019713),
        v(-0.020790660137153832, -0.0061388537220198, 0.9955192452749035),
    ]
    magShift = v(1.784207689270565e-05, -4.35287404874766e-06, 5.7614231262564255e-05)
    
    imu_mag_prescale = imu_to_sub.conj().quat_rot(body.vectorFromWorld(north))
    imu_mag = V(row*imu_mag_prescale for row in magScale) + magShift
    imu_mag += imu_to_sub.conj().quat_rot(thruster_mag)
    try:
        send_imu_update(
            flags=0,
            supply_voltage=random.gauss(12, .1),
            ang_rate=imu_gyro,
            acceleration=imu_acc,
            mag_field=imu_mag,
            temperature=random.gauss(25, .1),
            timestamp=world_time,
        )
    except:
        traceback.print_exc()
    
    
    msg = Odometry()
    msg.header.stamp = rospy.Time(world_time)
    msg.header.frame_id = '/simmap'
    msg.child_frame_id = '/base_link'
    msg.pose.pose.position = Point(*body.getPosition())
    q = V(body.getQuaternion())
    msg.pose.pose.orientation = Quaternion(q[1], q[2], q[3], q[0])
    msg.twist.twist.linear = Vector3(*q.conj().quat_rot(body.getLinearVel()))
    msg.twist.twist.angular = Vector3(*q.conj().quat_rot(body.getAngularVel()))
    odom_pub.publish(msg)
    
    reactor.callLater(max(0, world_time + dt - reactor.seconds()), world_tick)


reactor.listenTCP(10004, util.AutoServerFactory(devices.DepthProtocol, lambda: -body.getRelPointPos(imu_pos)[2]))
reactor.listenTCP(10025, util.AutoServerFactory(devices.IMUProtocol, imu_listeners))
for i in xrange(8):
    reactor.listenUDP(10030 + i, devices.ThrusterProtocol(i, thrusters))
def get_dvl_vel():
    dvl_to_sub = v(0,1,0,0)%v(0.0, 0.923879532511287, 0.382683432365090, 0.0)
    #dvl_to_sub = vector.axisangle_to_quat(v(1,0,0),math.pi)
    dvl_pos = imu_pos # v(1, 0, 0)
    return dvl_to_sub.conj().quat_rot(body.vectorFromWorld(body.getRelPointVel(dvl_pos)))
def get_dvl_range():
    g = ode.GeomRay(None, 1e3)
    g.set(body.getRelPointPos(imu_pos), body.vectorToWorld(v(0, 0, -1)))
    #print 1
    for contact in ode.collide(g, space):
        pos, normal, depth, geom1, geom2 = contact.getContactGeomParams()
        assert geom1 is g, geom1
        if geom2 in body_geoms:
            continue
        return (V(pos) - V(body.getRelPointPos(imu_pos))).mag()
    return 0
reactor.listenTCP(10050, util.AutoServerFactory(devices.DVLProtocol, get_dvl_vel, get_dvl_range))
reactor.listenUDP(10060, devices.MergeProtocol(lambda: killed))
reactor.listenTCP(10061, util.AutoServerFactory(devices.ActuatorProtocol))
reactor.listenTCP(10255, util.AutoServerFactory(devices.HeartbeatProtocol))

reactor.listenTCP(10070, util.AutoServerFactory(devices.PaulBoardProtocol, ping_listeners))

class Sub(object):
    is_base_link = True
    
    def __init__(self, body, is_killed_func):
        self.body = body
        self.is_killed_func = is_killed_func
        self.vectors = []
    
    def draw(self):
        with threed.GLMatrix:
            threed.rotate_to_body(self.body)
            
            q = gluNewQuadric()
            with threed.GLMatrix:
                glTranslate(+.2, 0, 0)
                glColor3f(0, 1, 0)
                gluSphere(q, 0.5, 40, 20)
            with threed.GLMatrix:
                glTranslate(-.2, 0, 0)
                glColor3f(1, 0, 0)
                gluSphere(q, 0.5, 40, 20)
            with threed.GLMatrix:
                glTranslate(+.4, +.2, .3)
                glColor3f(0, 0, 0)
                gluSphere(q, 0.1, 40, 20)
            with threed.GLMatrix:
                glTranslate(+.4, -.2, .3)
                glColor3f(0, 0, 0)
                gluSphere(q, 0.1, 40, 20)
            with threed.GLMatrix:
                glTranslate(+.7, 0, 0)
                glColor3f(0, 0, 0)
                gluSphere(q, 0.05, 40, 20)
            with threed.GLMatrix:
                glTranslate(0, 0, .5)
                if self.is_killed_func():
                    glColor3f(1, 0, 0)
                else:
                    glColor3f(0, 1, 0)
                gluSphere(q, 0.1, 20, 10)
            
            glDisable(GL_DEPTH_TEST)
            glBegin(GL_LINES)
            for start, end in self.vectors:
                glColor3f(0, 0, 0)
                glVertex3f(*start)
                glColor3f(1, 1, 1)
                glVertex3f(*end)
            glEnd()
            glEnable(GL_DEPTH_TEST)

class Buoy(object):
    def __init__(self, anchor_pos, cable_length, color, radius=4*.0254, mass=2):
        pos = anchor_pos + v(0, 0, cable_length)
        
        self.body = ode.Body(world)
        self.body.setPosition(pos)
        m = ode.Mass()
        m.setSphere(mass/(4/3*math.pi*radius**3), radius) # setSphereTotal is broken
        self.body.setMass(m)
        
        self.geom = ode.GeomSphere(space, radius)
        self.geom.setBody(self.body)
        
        self.color = color
        self.radius = radius
        
        self.anchor_point = anchor_pos
        self.joint = ode.BallJoint(world)
        self.joint.attach(self.body, None)
        self.joint.setAnchor(self.anchor_point)
    
    def step(self, dt):
        self.body.addForce(real_buoyancy_force(-self.pos[2], self.radius))
        self.body.addForce(-2*V(self.body.getLinearVel()))
    
    @property
    def pos(self):
        return self.body.getPosition()
    
    def draw(self):
        q = gluNewQuadric()
        with threed.GLMatrix:
            glTranslate(*self.pos)
            glColor3f(*self.color)
            gluSphere(q, self.radius, 30, 15)
        glColor3f(0, 0, 0)
        glBegin(GL_LINES)
        glVertex3f(*self.pos)
        glVertex3f(*self.anchor_point)
        glEnd()

class Pinger(object):
    def __init__(self, pos, freq, phase):
        self.pos = pos
        self.freq = freq
        self.phase = phase        
        self.time = 0
        self.pinged = False
    
    def step(self, dt):
        self.time += dt
        if self.time > 1:
            self.time -= 1
            self.pinged = False
        if self.time >= self.phase and not self.pinged:
            self.send_ping()
            self.pinged = True

    def send_ping(self):
        self.blink_time = 0
        body_pos = body.getPosRelPoint(self.pos)
        send_ping(body_pos, self.freq)

    def draw(self):
        q = gluNewQuadric()
        with threed.GLMatrix:
            glTranslate(*self.pos)
            if 0 < self.time - self.phase < .1:
                glColor3f(.2, 1, .2)
            else:
                glColor3f(.2, .2, .2)
            gluSphere(q, .1, 30, 15)

class CrazyPinger(Pinger):
    def send_ping(self):
        self.blink_time = 0
        pos = (random.gauss(0, 1), random.gauss(0, 1), random.gauss(2, 1))
        send_ping(pos, self.freq)
            
def world_from_2014_px(x, y, Z):
    # refer to auvsi_robosub/doc/2014_layout.png
    pool_size = 90.52, 61.56 # m
    pool_rect = (48, 130), (951, 528) # px. top left corner, size
    return v(
        ((x - pool_rect[0][0])/pool_rect[1][0]-1/2) * pool_size[0],
        ((y - pool_rect[0][1])/pool_rect[1][1]-1/2) * pool_size[1] * -1,
        Z,
    )
def q_from_yaw(yaw_deg):
    return vector.axisangle_to_quat(v(0, 0, 1), math.radians(yaw_deg))

w = threed.World()
body.setPosition(world_from_2014_px(610, 628, -0.5))
body.setQuaternion(q_from_yaw(25))

pygame.display.set_icon(pygame.image.load(roslib.packages.resource_file('subsim', 'icons', 'subsim.png')))
pygame.display.set_caption("subsim")
i = threed.Interface()
i.init(w, V(body.getPosition()) + (0,-2,2+random.gauss(0, 1)))



# objects begin

w.objs.append(pool_mesh)

sub_model = Sub(body, lambda: killed)
w.objs.append(sub_model)

#i.objs.append(threed.VectorField(get_water_vel))


# Gate
m_from_in = .0254
w.objs.append(threed.Capsules(world, space, world_from_2014_px(657+21/2, 574+52/2, -1), (1, 0, 0), [(m_from_in*s, m_from_in*e) for s, e in [
    (v(0, -5*12, -2.5*12), v(0, -5*12, 2.5*12)),
    (v(0, -5*12, 2.5*12), v(0, 5*12, 2.5*12)),
    (v(0, 5*12, -2.5*12), v(0, 5*12, 2.5*12)),
]], m_from_in*3/2, fixed=True, orientation=q_from_yaw(-170)))

# Control Panel
w.objs.append(Buoy(world_from_2014_px(691+20/2, 578+19/2, FLOOR), -FLOOR-1.5, (1, 0, 0), radius=9/2*m_from_in))

# Flight Path
path_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', '2013/path.obj'))
w.objs.append(path_mesh
    .rotate(q_from_yaw(45))
    .translate(world_from_2014_px(718+24/2, 553+24/2, FLOOR+random.uniform(0.3, 0.6))))

# Maneuvering
maneuvering_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', '2014/maneuvering.obj'))
w.objs.append(maneuvering_mesh
    .rotate(q_from_yaw(-110))
    .translate(world_from_2014_px(791+47/2, 502+23/2, FLOOR + random.uniform(1.2, 1.8))))

#
w.objs.append(path_mesh
    .rotate(q_from_yaw(60))
    .translate(world_from_2014_px(816+23/2, 480+24/2, FLOOR+random.uniform(0.3, 0.6))))

# Landing Site XXX
class Bin(object):
    def __init__(self, pos, q, tex):
        self.pos = pos
        self.q = q
        self.tex = tex
    def draw(self):
        with threed.GLMatrix:
            glTranslate(*self.pos)
            glMultMatrixf(self.q.quat_to_matrix4())
            glScale(0.3048, 0.3048, 0.3048) # work in feet
            glBegin(GL_QUADS)
            glColor3f(1, 1, 1)
            glVertex3f(+1.5, +1, 0)
            glVertex3f(-1.5, +1, 0)
            glVertex3f(-1.5, -1, 0)
            glVertex3f(+1.5, -1, 0)
            glEnd()
            
            with self.tex:
                glBegin(GL_QUADS)
                glColor3f(1, 1, 1)
                glTexCoord2f(0, 0);glVertex3f(+1, +0.5, .1/12)
                glTexCoord2f(1, 0);glVertex3f(-1, +0.5, .1/12)
                glTexCoord2f(1, 1);glVertex3f(-1, -0.5, .1/12)
                glTexCoord2f(0, 1);glVertex3f(+1, -0.5, .1/12)
                glEnd()
names = '1b-s 2a-s 3b-s 4-s'.split(' ')
random.shuffle(names)
print("%s", names)
height = FLOOR + random.uniform(.3, .6)
for x in xrange(2):
    for y in xrange(2):
        w.objs.append(Bin(world_from_2014_px(830+59/2, 385+57/2, height) + (-(y-.5)/1.5, -(x-.5), 0), q_from_yaw(0 if x == y else 90),threed.Texture(pygame.image.load(
            roslib.packages.resource_file('legacy_vision', 'data', 'bins/%s.png' % (names[x*2+y],))
        ))))


# Brunch w/ Alien XXX
shooter_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', '2014/shooter2014v4.obj'))
w.objs.append(shooter_mesh
    .rotate(q_from_yaw(-120))
    .translate(world_from_2014_px(887+57/2, 375+31/2, -1.5)))



#
w.objs.append(path_mesh
    .rotate(q_from_yaw(182))
    .translate(world_from_2014_px(829+26/2, 366+10/2, FLOOR+random.uniform(0.3, 0.6))))
w.objs.append(path_mesh
    .rotate(q_from_yaw(120))
    .translate(world_from_2014_px(853+19/2, 349+27/2, FLOOR+random.uniform(0.3, 0.6))))


# Reroute Power
reroute_pos = world_from_2014_px(610+15/2, 360+51/2, random.uniform(-1.8, -2.4))
reroute_power_board_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', '2014/reroutePowerBoard.obj'))
w.objs.append(reroute_power_board_mesh
    .rotate(q_from_yaw(0))
    .translate(reroute_pos))
peg_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', '2014/PowerPeg.obj'))
for a in [-1, 1]:
    for b in [-1, 1]:
        w.objs.append(peg_mesh
            .rotate(q_from_yaw(0))
            .translate(reroute_pos)
            .translate((0, 1*FT * a, 1*FT * b)))

# Collection Site
collection_site_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', '2014/collectionSite.obj')).rotate(q_from_yaw(0)).translate(world_from_2014_px(762+44/2, 213+45/2, -2))
w.objs.append(collection_site_mesh)
collection_site_geom = ode.GeomTriMesh(collection_site_mesh.ode_trimeshdata, space)

# Moon Rock
moon_rock_mesh = threed.mesh_from_obj(roslib.packages.resource_file('auvsi_robosub', 'models', '2014/moonRock.obj')).rotate(q_from_yaw(0)).translate(world_from_2014_px(762+44/2, 213+45/2, -1.9))
w.objs.append(moon_rock_mesh)
moon_rock_geom = ode.GeomTriMesh(moon_rock_mesh.ode_trimeshdata, space)
# XXX needs green cheese

#
w.objs.append(path_mesh
    .rotate(q_from_yaw(145))
    .translate(world_from_2014_px(724+26/2, 203+22/2, FLOOR+random.uniform(0.3, 0.6))))
w.objs.append(path_mesh
    .rotate(q_from_yaw(-35))
    .translate(world_from_2014_px(824+26/2, 248+20/2, FLOOR+random.uniform(0.3, 0.6))))

# pingers XXX
w.objs.append(Pinger(world_from_2014_px(705+11/2, 201+11/2, -3.5), 24e3, .4))
w.objs.append(Pinger(world_from_2014_px(856+11/2, 261+12/2, -3.5), 25e3, 0))

w.objs.append(CrazyPinger(world_from_2014_px(1000, 196, -3.5), 27e3, .7))

# XXX need two octogons here








# objects end

def set_forward_view():
    glTranslate(-.7, 0, 0)
    threed.rotate_to_body(body, inv=True)
c1 = threed.Camera(w, 'forward_camera', set_forward_view, body, fovy=60)

def set_down_view():
    glRotate(90, 0, -1, 0)
    threed.rotate_to_body(body, inv=True)
c2 = threed.Camera(w, 'down_camera', set_down_view, body, fovy=50)

def _():
    try:
        i.step()
        c1.step()
        c2.step()
    except:
        traceback.print_exc()
        reactor.stop()
reactor.callWhenRunning(task.LoopingCall(_).start, 1/24)





reactor.callWhenRunning(world_tick)

reactor.callWhenRunning(lambda: rospy.core.add_client_shutdown_hook(lambda reason=None: reactor.callFromThread(reactor.stop)))
reactor.run()
